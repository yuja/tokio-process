var N = null;var searchIndex = {};
searchIndex["cat"]={"doc":"","items":[],"paths":[]};
searchIndex["exit"]={"doc":"","items":[],"paths":[]};
searchIndex["tokio_process"]={"doc":"An implementation of asynchronous process management for Tokio.","items":[[3,"Child","tokio_process","Representation of a child process spawned onto an event loop.",N,N],[3,"WaitWithOutput","","Future returned from the `Child::wait_with_output` method.",N,N],[3,"StatusAsync","","Future returned by the `CommandExt::status_async` method.",N,N],[3,"OutputAsync","","Future returned by the `CommandExt::output_async` method.",N,N],[3,"ChildStdin","","The standard input stream for spawned children.",N,N],[3,"ChildStdout","","The standard output stream for spawned children.",N,N],[3,"ChildStderr","","The standard error stream for spawned children.",N,N],[8,"CommandExt","","Extensions provided by this crate to the `Command` type in the standard library.",N,N],[11,"spawn_async","","Executes the command as a child process, returning a handle to it.",0,[[["self"]],["result",["child"]]]],[10,"spawn_async_with_handle","","Executes the command as a child process, returning a handle to it.",0,[[["self"],["handle"]],["result",["child"]]]],[11,"status_async","","Executes a command as a child process, waiting for it to finish and collecting its exit status.",0,[[["self"]],["result",["statusasync"]]]],[10,"status_async_with_handle","","Executes a command as a child process, waiting for it to finish and collecting its exit status.",0,[[["self"],["handle"]],["result",["statusasync"]]]],[11,"output_async","","Executes the command as a child process, waiting for it to finish and collecting all of its output.",0,[[["self"]],["outputasync"]]],[10,"output_async_with_handle","","Executes the command as a child process, waiting for it to finish and collecting all of its output.",0,[[["self"],["handle"]],["outputasync"]]],[11,"id","","Returns the OS-assigned process identifier associated with this child.",1,[[["self"]],["u32"]]],[11,"kill","","Forces the child to exit.",1,[[["self"]],["result"]]],[11,"stdin","","Returns a handle for writing to the child's stdin, if it has been captured",1,[[["self"]],["option"]]],[11,"stdout","","Returns a handle for writing to the child's stdout, if it has been captured",1,[[["self"]],["option"]]],[11,"stderr","","Returns a handle for writing to the child's stderr, if it has been captured",1,[[["self"]],["option"]]],[11,"wait_with_output","","Returns a future that will resolve to an `Output`, containing the exit status, stdout, and stderr of the child process.",1,[[["self"]],["waitwithoutput"]]],[11,"forget","","Drop this `Child` without killing the underlying process.",1,[[["self"]]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_future","","",1,[[["self"]],["f"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"read","","",6,N],[11,"read","","",7,N],[11,"write","","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll",["exitstatus","error"]]]],[11,"poll","","",2,[[["self"]],["poll",["output","error"]]]],[11,"poll","","",3,[[["self"]],["poll",["exitstatus","error"]]]],[11,"poll","","",4,[[["self"]],["poll",["output","error"]]]],[11,"shutdown","","",5,[[["self"]],["poll",["error"]]]]],"paths":[[8,"CommandExt"],[3,"Child"],[3,"WaitWithOutput"],[3,"StatusAsync"],[3,"OutputAsync"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"]]};
initSearch(searchIndex);
